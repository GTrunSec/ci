name: $(TeamProject).$(Build.DefinitionName).$(BuildID)$(Rev:.r)_$(SourceBranchName).$(Date:yyyyMMdd).$(Build.Reason)
variables:
  NIX_CHANNELS_MOZILLA: master
  CI_ENV: $(Agent.BuildDirectory)/.ci
  CI_ALLOW_ROOT: true
  CI_CLOSE_STDIN: true # why does azure do this...
  TERM: linux
stages:
- stage: examples
  displayName: Example
  jobs:
  - job: empty
    displayName: empty
    strategy:
      matrix:
        linux:
          imageName: ubuntu-latest
        mojave:
          imageName: macos-latest
    pool:
      vmImage: $(imageName)
    steps:
    - template: ../azure/nix/install.yml
      parameters:
        ciPath: .
        config: tests/empty.nix
  - job: empty_latest
    displayName: empty (latest)
    strategy:
      matrix:
        linux:
          imageName: ubuntu-latest
        mojave:
          imageName: macos-latest
    pool:
      vmImage: $(imageName)
    steps:
    - template: ../azure/nix/install.yml
      parameters:
        ciPath: .
        config: tests/empty.nix
        nixVersion: latest
  - job: empty_fn
    displayName: empty function
    strategy:
      matrix:
        linux:
          imageName: ubuntu-latest
    pool:
      vmImage: $(imageName)
    steps:
    - template: ../azure/nix/install.yml
      parameters:
        ciPath: .
        config: tests/emptyfn.nix
  - job: cipkgs
    displayName: cipkgs
    strategy:
      matrix:
        linux:
          imageName: ubuntu-latest
        mojave:
          imageName: macos-latest
    pool:
      vmImage: $(imageName)
    steps:
    - template: ../azure/nix/install.yml
      parameters:
        ciPath: .
        config: tests/cipkgs.nix
  - job: cache
    displayName: cache
    strategy:
      matrix:
        linux:
          imageName: ubuntu-latest
        mojave:
          imageName: macos-latest
    pool:
      vmImage: $(imageName)
    steps:
    - template: ../azure/nix/install.yml
      parameters:
        ciPath: .
        config: tests/cache.nix
    - template: ../azure/nix/build.yml
      parameters:
        file: tests/cache.nix
        name: touch
        attr: touch
    - template: ../azure/nix/cache.yml
      parameters:
        name: touch
        CACHIX_CACHE: arc
  - job: impure
    displayName: impure
    strategy:
      matrix:
        linux:
          imageName: ubuntu-latest
        mojave:
          imageName: macos-latest
    pool:
      vmImage: $(imageName)
    steps:
    - template: ../azure/nix/install.yml
      parameters:
        ciPath: .
        config: tests/impure.nix
    - bash: |
        echo '{ "hello": "world" }' | jqhello
  - job: example_shell
    displayName: shell
    strategy:
      matrix:
        linux:
          imageName: ubuntu-latest
        mojave:
          imageName: macos-latest
        high_sierra:
          imageName: macos-10.13
    pool:
      vmImage: $(imageName)
    steps:
    - bash: |
        echo >> ~/.bash_profile # default on macos is missing trailing newline
        cd examples && ./example.sh < /dev/null
      displayName: example.sh
      env:
        NIX_VERSION: nix-2.2.1 # until https://github.com/NixOS/nix/issues/2805 is resolved
  - job: example_config
    displayName: ci.nix
    strategy:
      matrix:
        linux:
          imageName: ubuntu-latest
        mojave:
          imageName: macos-latest
        high_sierra:
          imageName: macos-10.13
    pool:
      vmImage: $(imageName)
    steps:
    - template: ../azure/nix/install.yml
      parameters:
        ciPath: .
        config: examples/ci.nix
    - bash: crex --help | lolcat
      displayName: crex --help
  - job: example_nix
    displayName: nix build example
    pool:
      vmImage: $(imageName)
    strategy:
      matrix:
        linux:
          imageName: ubuntu-latest
        mojave:
          imageName: macos-latest
        high_sierra:
          imageName: macos-10.13
    steps:
    - template: ../azure/nix/install.yml
      parameters:
        ciPath: .
        config: examples/ci.nix
        nixChannels: # customize channels via environment
          nixpkgs: unstable
    - template: ../azure/nix/build.yml
      parameters:
        name: example.attr
        file: examples/example.nix
        attr: example
    - template: ../azure/nix/build.yml
      parameters:
        name: example.expr
        file: examples/example.nix
        attr: ""
    - bash: nix eval --raw '(import <nixpkgs> { }).lib.version'
      displayName: <nixpkgs>.version
    - bash: nix eval --raw '(<mozilla>)' # channels pulled in via environment
      displayName: <mozilla>
